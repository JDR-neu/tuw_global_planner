#! /usr/bin/env python

PACKAGE='tuw_nav_costmap'
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

gen.add("localMapRadius"         , double_t, 0, "Radius of the layered local map [m]"                                                              ,5.000, 0.1000, 100 )
gen.add("localMapPixNr"          ,    int_t, 0, "Number of pixels per dimension of the local map [pix]"                                            ,  480,     10, 2000)

gen.add("obstInflateDist"        , double_t, 0, "Distance from obstacles that is considered invalid (inflates the obstacles [m]"                   , 0.30, 0.100,  10)
gen.add("obstFieldExtension"     , double_t, 0, "total obstacle distance field radius is obstInflateDist + obstFieldExtension [m]"                 , 0.05, 0.001,  10)

gen.add("routeGoalRadius"        , double_t, 0, "Radius of the disc around the active route end-point used as goal [m]"                            , 0.5, 0.01, 100)
gen.add("routeWaypointSampleDist", double_t, 0, "Sample distance for the path waypoints [m]"                                                       , 0.5, 0.01, 100)
gen.add("routeActiveArcLen"      , double_t, 0, "Length of the active route (from the first active route waypoint) [m]"                            ,   5, 0.10, 100)
gen.add("routeMaxDeviation"      , double_t, 0, "Maximum displacement error between agent pose and the route [m]"                                  ,   1, 0.01, 100)
gen.add("routeIsVisitedMaxAngle" , double_t, 0, "Maximum angular error between agent pose and a route waypoint for considering it visited [deg]"   , 180, 0.00, 180)

gen.add("laserDataTimeout"       , double_t, 0, "Time for which old laser readings are taken into account [s]"                                     ,   5, 0.01, 100)

exit(gen.generate(PACKAGE, "tuw_nav_costmap", "NavCostmapNode"))
